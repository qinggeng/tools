\section{小闹钟}
@
这是一个小工具，用来给我自己做点提醒的。
它的用途是设置一些循环提醒、闹钟提醒、倒计时提醒之类的。
当提醒的时间到的时候，它会给我的notification center发消息提醒。
\subsection{场景}
@
看看一些场景：
\NewList
\begin{easylist}
& 每天吃药
& 定时喝水
& 定时休息
\end{easylist}
\subsubsection{每天吃药}
@
我设定一个闹钟，每天在特定的时间段给我提醒吃药。
@
每天，如果我吃过药了，那么我会去手动取消这次提醒，
而如果我一直置之不理，这个闹钟会按照我先前指定的频率重复提醒。
\subsubsection{定时喝水}
@
我设定了一个喝水闹钟，每隔五分钟就会提醒我喝点水，它会按照频率定时提醒。
不过有些时候，我是不希望被打扰的，所以我会提前设定喝水的提醒时段。
\subsubsection{定时休息}
@
我一工作起来就容易忘了时间，为了健康着想，我需要设定一个定时休息的闹钟。
每次我开始工作时，我都会启动这个闹钟，这个闹钟启动之后，会开始倒计时，
在倒计时结束时提醒我。如果我不理睬这个提醒，那么就会一直反复提醒，直到我取消。
\subsection{设计}
@
小闹钟有一个界面，用于显示当前正在执行的闹钟。
@
设定过的闹钟被放在闹钟库中，便于下次使用。
@
可以添加倒计时闹钟、定时闹钟等等。
@
设置界面要足够大，便于手指点击。
\subsubsection{闹钟详细设置界面}
<<tangle source codes>>=
tangleSource alarmConfigTest.py $file alarmConfigTest.py
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<alarmConfigTest.py>>=
<<myAlarms.py>>
app = wx.App(redirect=False)
f = wx.Frame(None)
f.SetSize((400, 800))
sz = wx.BoxSizer(wx.VERTICAL)
f.SetSizer(sz)
p = AlarmSetting(f)
sz.Add(p, proportion = 1, flag = wx.EXPAND|wx.ALL)
f.Show()
app.MainLoop()
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<设置界面的定义>>=
def alwayFalse():
	return False
class AlarmSetting(wx.Panel):
	def __init__(self, parent):
		wx.Panel.__init__(self, parent)
		<<设定界面的初始布局>>
	<<设置界面的事件处理函数>>
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<设定界面的初始布局>>=
self.SetBackgroundColour(wx.Color(240, 240, 255))
mainSizer = wx.BoxSizer(wx.VERTICAL)
self.SetSizer(mainSizer)
<<一个巨大的输入框，用于输入闹钟的标题>>
<<我是水平分割线>>
<<用来设置计时方式和时长的区域>>
<<我是水平分割线>>
<<用来设置重复提醒的间隔的区域>>
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<用来设置重复提醒的间隔的区域>>=
btn = SwitchButton(self)
btn.title = u"激活"
ft = btn.GetFont()
ft.SetPointSize(24)
ft.SetFaceName(u'Yahei Mono')
btn.SetFont(ft)
bsz = wx.BoxSizer(wx.HORIZONTAL)
bsz.Add((50, -1))
bsz.Add(btn, proportion = 1, flag = wx.EXPAND |wx.LEFT|wx.RIGHT)
bsz.Add((20, -1))
mainSizer.Add(bsz, proportion = 0, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
<<我是水平分割线>>
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<一个巨大的输入框，用于输入闹钟的标题>>=
te = wx.TextCtrl(self)
font = te.GetFont()
font.SetPointSize(24)
try:
	font.SetFaceName(u'Yahei Mono')
except Exception, e:
	pass
te.SetFont(font)
mainSizer.Add(te, proportion = 0, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
self.titleInput = te
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
计时方法分两种：固定时间和倒计时。因此我们的时间设置区域也区分这两种情况。
区分的方法是，在区域的最上方设置类似segment/tab control，以区分计时方式。
在提示区域的下方就是时间设定。
@
关于闹钟重复的讨论：
\NewList
\begin{easylist}
& 不重复
& 重复
&& 每年，月，日，时，分，秒
&& 每个工作日
&& 每个满足条件的时间点
&& 如果今天是工作日，则在今天启用
&& 如果XXX，则启用
&&& 如果今天是工作日，则启用
&&& 如果今天没用过，则启用
&&& 如果过了整点，则启用
&&& 如果是每个月的第一天，则启用
&&& 如果是某天，则启用
&&& 如果程序启动，则启用
\end{easylist}
@
有一个闹钟设置器，它会反复检索启用条件，从模板库中根据闹钟模板生成新的闹钟。
@
当然，这种设置器并不是一直在检索条件，这不合理。
怎样才是合理的？
在恰当的时机，根据启用条件生成定时事件，在定时事件中启用闹钟？
@
我不想一直检索条件，是因为检索条件可能是非常复杂的操作，因此可能会阻塞，
也会无谓地消耗计算资源。
因此，反其道而行之，程序每次启动，会检索启用条件，生成闹钟。
但是，假设程序一直运行，那么我们也需要一个时机来检索启用条件。
什么时机呢？
一个隐藏的时钟事件？
这个事件的执行，一是激活一个闹钟，二是用于设置同等条件下的下一次时钟事件？
当程序启动、重复条件更改时，都会启用这个隐藏的时钟事件。
@
\NewList
\begin{easylist}
& 程序有闹钟模板库和激活闹钟库
& 每次启动时，程序扫描闹钟模板库中的闹钟模板，根据模板内容生成激活闹钟
& 每个激活的闹钟知道来自于哪个模板，当闹钟结束时，程序会再次根据闹钟的模板生成激活闹钟
& 关于闹钟模板的状态：
&& 闹钟模板有两种状态，启用和停用，只有启用的闹钟模板才能用于生成激活的闹钟。
\end{easylist}
<<用来设置计时方式和时长的区域>>=
<<计时方式提醒/切换区域>>
<<时间设置区域>>
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<计时方式提醒/切换区域>>=
headerSizer = wx.BoxSizer(wx.HORIZONTAL)
t1 = wx.StaticText(self, style = wx.BORDER_NONE,label = u"倒计时")
t1.SetFont(font)
headerSizer.Add(t1)
headerSizer.Add((20, 0))
t1.Bind(wx.EVT_LEFT_UP, self.onChooseCountDown)
self.ctHeader = t1

t1 = wx.StaticText(self, style = wx.BORDER_NONE,label = u"定时")
t1.SetFont(font)
t1.SetForegroundColour(wx.Color(128, 128, 128))
headerSizer.Add(t1)
t1.Bind(wx.EVT_LEFT_UP, self.onChooseAlarm)
mainSizer.Add(headerSizer)
self.amHeader = t1
p = wx.Panel(self)
p.SetBackgroundColour(wx.Color(240, 240, 255))
panelSizer = wx.BoxSizer(wx.VERTICAL)
p.SetSizer(panelSizer)
p.SetMinSize((100, 200))
<<布局时长设置界面>>
mainSizer.Add(p, proportion = 0, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<布局时长设置界面>>=
sz = p.GetSizer()
bsz = wx.BoxSizer(wx.HORIZONTAL)
imgPath =u"appbar.navigate.previous.png" 
<<添加时长的操作按钮>>
b.Bind(wx.EVT_BUTTON, self.onNavPrevBtn)
bsz.Add((32, 0))
imgPath =u"appbar.navigate.next.png" 
<<添加时长的操作按钮>>
b.Bind(wx.EVT_BUTTON, self.onNavNextBtn)
bsz.Add((1, 0), proportion = 1, flag = wx.EXPAND| wx.LEFT| wx.RIGHT)
imgPath =u"appbar.add.png" 
<<添加时长的操作按钮>>
bsz.Add((32, 0))
imgPath =u"appbar.minus.png" 
<<添加时长的操作按钮>>
sz.Add(bsz, proportion = 0, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
sz.Add((0, 20))
<<添加年月日时分秒>>
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<添加年月日时分秒>>=
gsz = wx.GridSizer(2, 3)
self.timeEdits = []
hint = u"年"
<<添加时间编辑控件>>
self.yearEdit = te
hint = u"月"
<<添加时间编辑控件>>
self.monthEdit = te
hint = u"日"
<<添加时间编辑控件>>
self.dayEdit = te
hint = u"时"
<<添加时间编辑控件>>
self.hourEdit = te
hint = u"分"
<<添加时间编辑控件>>
self.minuteEdit = te
hint = u"秒"
<<添加时间编辑控件>>
self.secondEdit = te
sz.Add(gsz, proportion = 1, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
self.lastFocusTimeEdit = None
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<设置界面的事件处理函数>>=
def onEditSetFocus(self, te, hint, ev):
	v = te.GetValue().strip()
	if v == hint:
		te.SetValue(u"")
	te.SetForegroundColour(wx.Colour(0, 0, 0))
def onEditKillFocus(self, te, hint, ev):
	v = te.GetValue().strip()
	if len(v) == 0:
		te.SetValue(hint)
		te.SetForegroundColour(wx.Colour(220, 220, 220))
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<添加时间编辑控件>>=
te = wx.TextCtrl(p)
te.SetFont(font)
te.SetValue(hint)
te.SetForegroundColour(wx.Colour(220, 220, 220))
gsz.Add(te, proportion = 1, flag = wx.ALIGN_CENTER_HORIZONTAL)
te.Bind(wx.EVT_KILL_FOCUS, functools.partial(self.onEditKillFocus, te, hint))
te.Bind(wx.EVT_SET_FOCUS, functools.partial(self.onEditSetFocus, te, hint))
self.timeEdits.append(te)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<添加时长的操作按钮>>=
b = wxTools.makeBitmapButton(
		p,
		(48, 48),
		imgPath)
b.SetBackgroundColour(wx.Color(240, 240, 255))
b.Bind(wx.EVT_NAVIGATION_KEY, self.onNavKeyOnControlButtons)
bsz.Add(b, proportion = 0)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<设置界面的事件处理函数>>=
def onNavNextBtn(self, ev):
	wnd = self.lastFocusTimeEdit
	if wnd not in self.timeEdits:
		self.yearEdit.SetFocus()
	else:
		self.timeEdits[(self.timeEdits.index(wnd) + 1) % len(self.timeEdits)].SetFocus()
	self.lastFocusTimeEdit = wx.Window.FindFocus()

def onNavPrevBtn(self, ev):
	wnd = self.lastFocusTimeEdit
	if wnd not in self.timeEdits:
		self.secondEdit.SetFocus()
	else:
		self.timeEdits[(self.timeEdits.index(wnd) - 1) % len(self.timeEdits)].SetFocus()
	self.lastFocusTimeEdit = wx.Window.FindFocus()

def onNavKeyOnControlButtons(self, ev):
	if ev.GetDirection() == wx.NavigationKeyEvent.IsForward:
		self.yearEdit.SetFocus()
	else:
		self.titleInput.SetFocus()

def onChooseCountDown(self, evt):
	t1 = self.ctHeader
	t1.SetForegroundColour(wx.Color(0, 0, 0))
	t1 = self.amHeader
	t1.SetForegroundColour(wx.Color(128, 128, 128))
	self.Refresh()

def onChooseAlarm(self, evt):
	t1 = self.ctHeader
	t1.SetForegroundColour(wx.Color(128, 128, 128))
	t1 = self.amHeader
	t1.SetForegroundColour(wx.Color(0, 0, 0))
	self.Refresh()
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<我是水平分割线>>=
l = wx.StaticLine(self, wx.HORIZONTAL)
mainSizer.Add((0, 4))
mainSizer.Add(l, proportion = 0, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
mainSizer.Add((0, 4))
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{闹钟界面}
@
闹钟界面指的是在主界面中的闹钟的摘要界面。
摘要界面的主要作用是显示闹钟的信息、时间和是否启用。
同时还能在摘要界面上直接启用或者禁用闹钟，或者进入闹钟的详细设置界面。
<<tangle source codes>>=
tangleSource alarmBriefTest.py $file alarmBriefTest.py
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<alarmBriefTest.py>>=
<<myAlarms.py>>
app = wx.App(redirect=False)
f = wx.Frame(None)
f.SetSize((320, 180))
sz = wx.BoxSizer(wx.VERTICAL)
f.SetSizer(sz)
p = AlarmBrief(f)
p.setBrief(u"测试闹钟")
p.setAlarmTime(u"每个工作日9点30分")
sz.Add(p, proportion = 1, flag = wx.EXPAND|wx.ALL)
f.Show()
app.MainLoop()
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<闹钟界面的定义>>=
class AlarmBrief(wx.Panel):
	def __init__(self, parent):
		wx.Panel.__init__(self, parent)
		mainSizer = wx.BoxSizer(wx.VERTICAL)
		self.SetSizer(mainSizer)
		font = self.GetFont()
		font.SetPointSize(24)
		font.SetFaceName(u'Yahei Mono')
		self.SetFont(font)
		st = wx.StaticText(self)
		st.SetFont(font)
		mainSizer.Add(st, proportion = 0, flag = wx.EXPAND| wx.LEFT | wx.RIGHT)
		self.briefText = st

		st = wx.StaticText(self)
		font.SetPointSize(16)
		st.SetFont(font)
		mainSizer.Add(st, proportion = 0, flag = wx.EXPAND| wx.LEFT | wx.RIGHT)
		self.alarmTime = st

		<<闹钟界面的工具条>>
	
	def setAlarmTime(self, text):
		self.alarmTime.SetLabel(text)
		self.Refresh()

	def setBrief(self, text):
		self.briefText.SetLabel(text)
		self.Refresh()
	
	def onConfigBtn(self, ev):
		if self.config != None:
			self.config()
		pass
	def onActiveBtn(self, ev):
		if self.switchActive != None:
			self.switchActive()

	def onDeleteBtn(self, ev):
		if self.delete != None:
			self.delete()
	
	def activate(self):
		self.activeBtn.SetBitmapLabel(wx.BitmapFromImage(resource['appbar.clock.png']))
		self.Refresh()

	def deactivate(self):
		self.acctiveBtn.SetBitmapLabel(wx.BitmapFromImage(resource['appbar.clock.png.disabled']))
		self.Refresh()
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@
工具条位于闹钟名称和时间提示的下方，有配置和启用两个按钮。
这两个按钮左右分布，以防止误触。
<<闹钟界面的工具条>>=
toolbarSizer = wx.BoxSizer(wx.HORIZONTAL)

btn = wx.BitmapButton(self, style = 0)
self.deleteBtn = btn
btn.Bind(wx.EVT_BUTTON, self.onDeleteBtn)
img = resources['delete.png'].Copy()
img.Rescale(60, 60, wx.IMAGE_QUALITY_HIGH)
btn.SetBitmapLabel(wx.BitmapFromImage(img))
btn.SetSize((60, 60))
toolbarSizer.Add(btn, proportion = 0, flag = wx.SHAPED)

toolbarSizer.Add((1, 0), proportion = 1, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)

btn = wx.BitmapButton(self, style = 0)
self.configBtn = btn
btn.Bind(wx.EVT_BUTTON, self.onConfigBtn)
img = resources['cog.png'].Copy()
img.Rescale(60, 60, wx.IMAGE_QUALITY_HIGH)
btn.SetBitmapLabel(wx.BitmapFromImage(img))
btn.SetSize((60, 60))
toolbarSizer.Add(btn, proportion = 0, flag = wx.SHAPED)

toolbarSizer.Add((1, 0), proportion = 1, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)

btn = wx.BitmapButton(self, style = 0)
self.activeBtn = btn
btn.Bind(wx.EVT_BUTTON, self.onActiveBtn)
img = resources['clock.png'].Copy()
img.Rescale(60, 60, wx.IMAGE_QUALITY_HIGH)
btn.SetBitmapLabel(wx.BitmapFromImage(img))
btn.SetSize((60, 60))
toolbarSizer.Add(btn, proportion = 0, flag = wx.SHAPED)
mainSizer.Add(toolbarSizer, proportion = 0, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{执行闹钟界面}
@
执行闹钟界面和闹钟界面很类似，都有闹钟名称和时间提示。所不同的是，执行闹钟有倒计时，
另外它的工具条在未到预定时间时显示取消按钮；在到时间后，显示消除或者推迟按钮。
<<alarmRunningTest.py>>=
<<myAlarms.py>>
def onTimer(p, ev):
	p.countDown()
app = wx.App(redirect=False)
f = wx.Frame(None)
f.SetSize((320, 180))
sz = wx.BoxSizer(wx.VERTICAL)
f.SetSizer(sz)
p = RunningAlarm(f)
p.setBrief(u"测试闹钟")
id = wx.NewId()
timer = wx.Timer(p, id)
timer.Start(1000, False)
p.Bind(wx.EVT_TIMER, functools.partial(onTimer, p))
p.setCountDownSeconds(900)
#p.setAlarmTime(u"每个工作日9点30分")
sz.Add(p, proportion = 1, flag = wx.EXPAND|wx.ALL)
f.Show()
app.MainLoop()
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<tangle source codes>>=
tangleSource alarmRunningTest.py $file alarmRunningTest.py
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
执行闹钟界面有3行，名称，时间描述和倒计时。有一个工具条。
可以设定执行闹钟的倒计时长度。
执行闹钟会自动倒计时，并在时间到达时通知。
<<执行闹钟界面的定义>>=
class RunningAlarm(wx.Panel):
	def __init__(self, parent):
		wx.Panel.__init__(self, parent)
		mainSizer = wx.BoxSizer(wx.VERTICAL)
		self.SetSizer(mainSizer)
		font = self.GetFont()
		font.SetPointSize(24)
		font.SetFaceName('Yahei Mono')
		st = wx.StaticText(self)
		st.SetFont(font)
		mainSizer.Add(st, proportion = 0, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
		self.briefText = st
		st = wx.StaticText(self)
		st.SetFont(font)
		mainSizer.Add(st, proportion = 0, flag = wx.EXPAND | wx.LEFT | wx.RIGHT)
		self.countDownText = st
		self.seconds = 0
	
	def setBrief(self, text):
		self.briefText.SetLabel(text)
	def displayCountDown(self):
		self.countDownText.SetLabel(wx.TimeSpan.Seconds(self.seconds).Format(u"%H:%M:%S"))
		self.Refresh()
	def setCountDownSeconds(self, seconds):
		self.seconds = seconds
		self.displayCountDown()
		
	def countDown(self):
		self.seconds = max(0, self.seconds - 1)
		self.displayCountDown()

	def alarm(self):
		pass
	def cancel(self):
		pass
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{主界面}
@
主界面需要：
\begin{inparaenum}
\item 提供离当前最近的闹钟的倒计时和当前最近的闹钟的内容。
\item 根据设置提供某个时间段内的闹钟列表。
\item 可以直接取消这个时间段内的任意闹钟。
\item 解除或延迟已到期的闹钟。
\item 可以查看所有闹钟的列表，在列表上直接启用/禁用/删除闹钟，或者进入闹钟的详细设置界面。
\end{inparaenum}

\subsection{控件}
\subsubsection{SwitchBox}
@
这是一个勾选框，因为系统的勾选框不能做到巨大，所以要自己写一个。

<<辅助控件的定义>>=
class SwitchButton(wx.Control):
	def __init__(self, parent):
		self.checked = False
		self.title = u""
		wx.Control.__init__(self, parent, style = wx.BORDER_NONE, size=(100, 40))
		self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)
		self.Bind(wx.EVT_PAINT, self.onPaint)
		self.Bind(wx.EVT_LEFT_UP, self.onClick)
	
	def onClick(self, ev):
		if self.checked == True:
			self.checked = False
		else:
			self.checked = True
		self.Refresh()

	def drawEmptyRect(self, dc, x, y, w, h):
		dc.DrawLines([(x, y),(x + w, y), (x + w, y + h), (x, y + h), (x, y)])

	def onPaint(self, ev):
#print self.GetRect().asTuple()
		dc = wx.AutoBufferedPaintDC(self)
		brush = wx.Brush(wx.Color(240, 240, 255), wx.SOLID)
		dc.SetBackground(brush)
		dc.Clear()
		<<排版勾选框按钮>>
		pass
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
它的排版规则是这样：
文字靠左，勾选靠右，勾选盖在文字上面。垂直居中显示
<<排版勾选框按钮>>=
w, h = self.GetSize()
font = self.GetFont()
fz = font.GetPointSize()
dc.SetFont(font)
tw, th = dc.GetTextExtent(self.title)
titleOffsetY = max(0, (h - th))/2
dc.DrawText(self.title, 0, titleOffsetY)
font.SetFaceName(u'Segoe UI Symbol')
dc.SetFont(font)
mw, mh = dc.GetTextExtent(u"\u2713")
rw = rh = max(mw, mh)
checkOffsetX = max(w - rw -2, tw + 20)
checkOffsetY = max(h - rh, 0) / 2
self.drawEmptyRect(dc, checkOffsetX, checkOffsetY, rw, rh)
if self.checked:
	dc.DrawText(u"\u2713", checkOffsetX + (rw - mw) / 2, checkOffsetY)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{文件}
<<myAlarms.py>>=
import wx
import wxTools
import functools
from wx.lib.embeddedimage import PyEmbeddedImage
<<程序所需的图片和其他资源>>
<<辅助控件的定义>>
<<设置界面的定义>>
<<闹钟界面的定义>>
<<执行闹钟界面的定义>>
<<主界面的定义>>
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<tangle source codes>>=
tangleSource myAlarms.py $file myAlarms.py
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{图片和其他资源}
<<程序所需的图片和其他资源>>=
resources={}
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{图片}
\subsubsection{cog.png}
<<程序所需的图片和其他资源>>=
appbar_cog = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAAEwAAABMCAYAAADHl1ErAAAAAXNSR0IArs4c6QAAAARnQU1B"
    "AACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAANTSURBVHhe7ZpNyA1RGMdvyEfykVAW"
    "ykJKUrIg+Ug2lGKnJLJggZKFkp2yshMLJUlJUrIjSmFrgZJY+Ei+SiJfRQm/f3fmbZqeM3Pf"
    "OzP3zsz7/OrXjLf7HvOc95w5z3nO7TiO4ziO4ziO4ziO4ziO4zjOcBgfXYfFONyKn/GnfhBg"
    "AZ7HH/gC/+GYYiYewVeo4I9iFsdQn5Pv8DiqE1uPgjyF3zHuAPkRJ2GIuGOT/sW92GpWYDrw"
    "2N1osR6tz8sl2HruoBX8G7yLGk1/UO80Tb9PaH3+Po4JtqDVAaN1Pw4crVKD5ga+794WYnJ0"
    "bTX6A51Ea8T04zmciK1EgV1BK/AiXscJmESLwfzubTPYg0u7tyOUObLSnkGxEW+hUg6NvkYw"
    "D7XKKZBHqJezUoZ0kGm1eu7DRTgVZ6NGyg68iuoE6/ditaIm/61Vdi7WHmXtyQfP8yVuwDw0"
    "Yh+j1UbIvB1ELbCy8pDKuzSSekUjT1POasvyA6bfb7UiKytPq47VnnK0TMMnaLVpuRNrywW0"
    "HtpyNfbLSrTaTPoFT2CtV0u98FWFeIpWELGaVkVROmG1rWl4EDUSG8UqVJ3LCuoAFiW08t7E"
    "xqKyjRVUGVWGhWi1/RwbixWQzKp99cp0tNr+ipUxjM23+B1dixDq9DLaDlJ1h72NrmnKWLlC"
    "bXyLrpUwrA5bE12LoEXFQlN1Mw5r9vSFsuvt+Bqt94xSgqLkZfzaWyoPW4y1JT4NUrnZCiJp"
    "1Ylr7EWsLdqGWA9tqe1Nv1ujZ2i1aantWm3RVFSmbT24ZdWbb+1Xa08/5Z11mMcyfIhWGyEb"
    "Ud5R0U7Fu+SDh47Kkt7DQ7gcZ6DyLB386pTpEuYVEHWouwtvoz6rIqb2to1A5WEF8QBVMdVU"
    "PR39rArPYhJ1tP7fxqAHXtu9HUF50TW0Ai6i3mlTsJWo05Qb5U2vXtXhR6MS1H7p5VAkT1VC"
    "Bn4m2eS/zhzc1L1tP6EvpGg11ZZGq6xWOeVRytVCOwe103q0IFjBy1BWnjWF9RWqVrMNf2E6"
    "8KysXDlZunqrEXgZa725LotZeBiTB7P6WmYW8Q5C5wS1Pw2qElUelOhqqmahHYS+s1FGedtx"
    "HMdxHMdxHMdxHMdxHMdxmkWn8x9660xsQgPtoQAAAABJRU5ErkJggg==")
getappbar_cogData = appbar_cog.GetData
getappbar_cogImage = appbar_cog.GetImage
getappbar_cogBitmap = appbar_cog.GetBitmap
resources['cog.png'] = getappbar_cogImage()
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{clock.png}
<<程序所需的图片和其他资源>>=
appbar_clock = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAAEwAAABMCAYAAADHl1ErAAAAAXNSR0IArs4c6QAAAARnQU1B"
    "AACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAQGSURBVHhe7ZpfqBVVFIdvGfUgoYiF"
    "gmmoGVKWCioiSf+kwh4kVAhERJPQJxE08skHJSLowYhAqhcfDHsSiXoyQVSIEAX/9CCliIkR"
    "CWUaEuXvu2c2LBb7zDnnOnPvmXvXBx977j0ze89ezOy9Z80MBEEQBEEQBEEQBEEQBEEQBEHQ"
    "CB4oyrp5Rj4tx8nL8qy8K++XOfJ5OUFekidlFfWOGGvkFfm/86pcJYfKi/Ki9PXelO/KB2Xj"
    "+ET6DlnvyIWyV2bLv2SuzuQB2SjWyVxH8B/5qXxCergyCMiSwnmS283zuPxI/i1zbeA7sjFc"
    "l7lOnJFPSct8uVf+IAlm7rhf5H75qrS321R5XOaO4RwaAQN8rgOfyYdl4i35o8ztWyaD+xaZ"
    "Akf5gczty7n0PZukP/EdMjFTHpV+n149LbllE7Th92Fo6Hu2SnvSNljMbr9L+7v1tvxZcnsi"
    "22XjFL/Z2dYHjVm67yEo6YQ/5x8F/D/X+f/kYblaPio9D8mX5ZcyN8ax7rJBY0JJv9Fm30MH"
    "GWdYf03kH2KZzAXriLS3VSeYQQ9KXw9BWyGBoHNlcg6cSyNYLl9rbQ5Mltek7SBX1Xsyt8Ac"
    "Lye1NtvCkoEg2Tp/kyw3gCsrtd84WA7YjhGst2UOBukUCB6f7Kzq4TakLls3t22j4Rb6V9pO"
    "seZqx/fS7svxZeySdv9ujulrGPRtZzqNKz5gndZRaby0x9iJplE8Iv+QtjMbZBm9Bgyo0x5D"
    "m7TdOOzyAnlU6TRrDSVg4B/FaltO5GapqvAn/bVkPKsD6rY0MmALijLxTVHWAQ/glllFWTl1"
    "Zlx51rNBe1aeb222hVvSXh1fScYkzy35sbwx+FdrzfVda3OQY/Kl1mZzIDh2XHlMdsKPYWXu"
    "k4ml0v52StZCnbekJ5cI9Fwoym6YUpTgZ0WeOWuhzoCRt7dMK8oyvpC/tjY7cq4owV+9fxZl"
    "5dQZMH+1vFKUZTDuzZCLJKmZtW18Xe6RCb/86OVK7RvosB1XfpJ1Qd22rUbkwTyMWT5/tVJW"
    "zRvStkGbnbIdfcshaTtDFrVqqNO2QZuNZbG0ncHNsio2Sl8/bTYaVvi2Q+S7qujUc5J3ALbu"
    "b2XjeVLyCt92jNU7Y89QYaHqs7i8Def7jVEBs5bPjvL3hzLl/buB9PX70qencb0cVTDe+KAh"
    "Vx9Z2LJUDm+4t0ny9v54tK/yamW4PndKEDQyou3aJY/PVznpKWG6ZCHLdxbtjtkp+c5i1PKC"
    "zH0C1atcbW/KMQFj0W7pJ4Nu5P0mmQpe3405CByDNW++ff7fyiB/Qm6X6d3jiDDcY1gZ5PvJ"
    "lM6VKftA1oHsBZ9JsWwIgiAIgiAIgiAIgiAIgiAIgiDogoGBe8Bdvqf5wsv0AAAAAElFTkSu"
    "QmCC")
getappbar_clockData = appbar_clock.GetData
getappbar_clockImage = appbar_clock.GetImage
getappbar_clockBitmap = appbar_clock.GetBitmap
resources['clock.png'] = getappbar_clockImage()
img = resources['clock.png'].Copy()
img.Replace(0, 0, 0, 128, 128, 128)
resources['clock.png.disabled'] = img
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{delete.png}
<<程序所需的图片和其他资源>>=
appbar_delete = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAAEwAAABMCAYAAADHl1ErAAAAAXNSR0IArs4c6QAAAARnQU1B"
    "AACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAImSURBVHhe7drPK0VBFAfwxwKlkKJk"
    "o1hRSpGdrBBlb2MjG0v/kIWtlR0rC2WHtcTCRlGi5EfC99yZ0Zi8cr17znvu+37q28y73qWZ"
    "Zs597rsVIiIiIiIiIiIiIqL6aPFto+hH+lz3yxNy4boUW0FekY8k78g6QokzJJ2skFOEEpPI"
    "FZJO1jUyizQEqxo2hXS6rpo35NB1/7d5JF01WllCVLX6VtOyby0s+laNxYSN+taC+t+yqGGy"
    "JbtcV90Dsue6Oiw/uPYiq0hP9qo4j8gWcpu9KpEd5KdCXUTkd5uwqGHBjG81DPpWneWWPEeG"
    "XTezi7wg3cicHPBOEHmvGEEmXDezj9wj7Uh89ZW6teC65XGExNso/JM9hsTHN5BA+vHPqp2z"
    "jZiw3JKyMrTI1dGE5YRpDurGt+osJywdVIdvpY7VqilWWPgwm2erhklPbzJqbvdv6rnCilTK"
    "Lcmin1M6KPksJYqoYU1R9EMN++3qiM9Pa1hTrLAisejnIFu6lCtMaxWYTZao55aM69BvVl98"
    "fnxD0qzgC8sJE7UMLr6ahiusKO0KExqDMyv44j+tsGpKvSXj1VBLDZObjgG3ZBXPvhVxDWPR"
    "z4krLCfTom9tEwn34S+RA587f0wijz2F4/EjUPKecFzODcctH0Uwt4aEgRaVhnkUSsMQIt9U"
    "/zTwv0SeWBxAzNTjGddxZBppy17VRr66O3ZdIiIiIiIiIiIiIiKioFL5BFYl1SS0Sr0AAAAA"
    "AElFTkSuQmCC")
getappbar_deleteData = appbar_delete.GetData
getappbar_deleteImage = appbar_delete.GetImage
getappbar_deleteBitmap = appbar_delete.GetBitmap
resources['delete.png'] = getappbar_deleteImage()
img = resources['delete.png'].Copy()
img.Replace(0, 0, 0, 128, 128, 128)
resources['delete.png.disabled'] = img
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{action}
<<action>>=
<<tangle\_in\_linux>>
<<weave>>
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{tangle}
<<tangle\_in\_linux>>=
fileName=myAlarms
file=$fileName.nw
ltx_file=$fileName.ltx
aux_file=$fileName.aux
log_file=$fileName.log
function tangleSource 
{
	
	echo '#-*- coding: utf-8 -*-' > $3
	../pytangle.py -R"$1" -L'#line %L, %F%N' $2>> $3
	python ../literatePython/LineDirective.py $3>temp.py
	rm -rf $3
	mv temp.py $3
}
<<tangle source codes>>
<<tangle\_windows\_part>>
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<tangle\_windows\_part>>=
notangle -R"action\\_in\\_win" -t4 $file> action.bat
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<action\_in\_win>>=
@echo off
REM myAlarms.py
REM alarmConfigTest.py
REM alarmBriefTest.py
alarmRunningTest.py
pause
exit 0
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{weave}
<<weave>>=
noweave -x $file| \
sed 's/\\usepackage{noweb}/\\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}&/g'| \
sed 's/\\usepackage{noweb}/\\usepackage{fontspec, xunicode, xltxtra}&/g'| \
sed 's/\\usepackage{noweb}/\\usepackage{listings}&/g'| \
sed 's/\\usepackage{noweb}/\\usepackage[120, ampersand]{easylist}&/g'| \
sed 's/\\usepackage{noweb}/\\usepackage{paralist}&/g'| \
sed 's/\\usepackage{noweb}/\\usepackage{color}&/g'| \
sed 's/\\usepackage{noweb}/\\usepackage{hyperref}&/g'| \
sed 's/\\usepackage{noweb}/\\usepackage{underscore}&/g'| \
sed 's/\\usepackage{noweb}/&\\noweboptions{longxref}/g'| \
sed 's/\\usepackage{noweb}/&\\noweboptions{smallcode}/g'| \
sed 's/\\usepackage{noweb}/&\\noweboptions{alphasubpage}/g'| \
sed 's/\\usepackage{noweb}/&\\noweboptions{longchunks}/g'| \
sed 's/\\usepackage{noweb}/&\\XeTeXlinebreaklocale "zh-cn"/g'| \
sed 's/\\usepackage{noweb}/&\\pagecolor{grayyellow}/g'| \
sed 's/\\usepackage{noweb}/&\\definecolor{grayyellow}{RGB}{255, 255, 200}/g'| \
sed 's/\\usepackage{noweb}/&\\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt/g'| \
sed 's/\\usepackage{noweb}/&\\setmainfont[BoldFont={Adobe Heiti Std}]{Adobe Song Std}/g'| \
sed 's/\\usepackage{noweb}/&\\setmonofont[Color=0000FF99]{Microsoft YaHei UI Light}/g'| \
sed 's/\\usepackage{noweb}/\\usepackage{amsmath}&/g'| \
sed 's/\\usepackage{noweb}/\\usepackage{amssymb}&/g'| \
sed 's/\\begin{document}/&\\tableofcontents/g'| \
sed 's/\\begin{document}/&\\setcounter{tocdepth}{7}/g'| \
sed 's/\\documentclass/&[11pt]/g'|
sed 's/    /  /g'> $ltx_file &2|iconv -f utf-8 -t gbk
xelatex $ltx_file
xelatex $ltx_file
echo $ltx_file|sed 's/ltx$/aux/g'|xargs rm -rf
echo $ltx_file|sed 's/ltx$/toc/g'|xargs rm -rf
echo $ltx_file|sed 's/ltx$/out/g'|xargs rm -rf
rm -rf $ltx_file
rm -rf $aux_file
rm -rf $log_file
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<declare of literate programming>>=
/*

              *****************************************
              *                                       *
              *                注意事项               *
              *                                       *
              *****************************************

你看到的这份源码文件不是直接生成的,而是使用noweb工具，从*.nw文件中将代码抽取出来组织而成的。
因此请不要直接编辑这些源文件，否则它们会被*.nw文件中的内容覆盖掉。
如果想了解如何使用noweb工具抽取代码和生成pdf文档，请联系huangyangkun@gmail.com。
noweb是一个“文学编程（literate programming）”工具。
关于文学编程: http://zh.wikipedia.org/wiki/%E6%96%87%E5%AD%A6%E7%BC%96%E7%A8%8B
关于noweb: http://en.wikipedia.org/wiki/Noweb
*/
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{代码块列表}
\nowebchunks
